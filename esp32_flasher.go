package main

import (
	"encoding/binary"
	"fmt"
	"time"

	"go.bug.st/serial"
)

// NewESP32FlasherWithProgress —Å–æ–∑–¥–∞–µ—Ç —Ñ–ª–µ—à–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ö–æ–¥–æ–º –≤ bootloader
func NewESP32FlasherWithProgress(portName string, callback ProgressCallback) (*ESP32Flasher, error) {
	mode := &serial.Mode{
		BaudRate: 115200,
		Parity:   serial.NoParity,
		DataBits: 8,
		StopBits: serial.OneStopBit,
	}

	port, err := serial.Open(portName, mode)
	if err != nil {
		return nil, fmt.Errorf("failed to open port: %w", err)
	}

	flasher := &ESP32Flasher{
		port:      port,
		portName:  portName,
		callback:  callback,
		chipType:  CHIP_UNKNOWN,
		blockSize: ESP_FLASH_WRITE_SIZE,
	}

	if err := flasher.enterBootloader(); err != nil {
		port.Close()
		return nil, fmt.Errorf("failed to enter bootloader: %w", err)
	}

	return flasher, nil
}

// NewESP32FlasherManual —Å–æ–∑–¥–∞–µ—Ç —Ñ–ª–µ—à–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
func NewESP32FlasherManual(portName string, callback ProgressCallback) (*ESP32Flasher, error) {
	mode := &serial.Mode{
		BaudRate: 115200,
		Parity:   serial.NoParity,
		DataBits: 8,
		StopBits: serial.OneStopBit,
	}

	port, err := serial.Open(portName, mode)
	if err != nil {
		return nil, fmt.Errorf("failed to open port: %w", err)
	}

	flasher := &ESP32Flasher{
		port:      port,
		portName:  portName,
		callback:  callback,
		chipType:  CHIP_UNKNOWN,
		blockSize: ESP_FLASH_WRITE_SIZE,
	}

	if callback != nil {
		callback.emitLog("‚ö†Ô∏è –†–£–ß–ù–û–ô –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
		callback.emitLog("üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader:")
		callback.emitLog("   ‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ BOOT –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ RESET")
		callback.emitLog("   ‚Ä¢ –ò–ª–∏ –∑–∞–º–∫–Ω–∏—Ç–µ GPIO0 –Ω–∞ GND –ø—Ä–∏ —Å–±—Ä–æ—Å–µ")
		callback.emitLog("   ‚Ä¢ –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ 'waiting for download'")
		callback.emitLog("")
	}

	if !flasher.testSync() {
		port.Close()
		return nil, fmt.Errorf("ESP32 –Ω–µ –≤ —Ä–µ–∂–∏–º–µ bootloader. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
	}

	if callback != nil {
		callback.emitLog("‚úÖ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader!")
	}

	return flasher, nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (f *ESP32Flasher) Close() error {
	return f.port.Close()
}

// enterBootloader –ø–µ—Ä–µ–≤–æ–¥–∏—Ç ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏
func (f *ESP32Flasher) enterBootloader() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ü–µ—Ä–µ–≤–æ–¥ ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏...")
	}

	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(50 * time.Millisecond)

	// –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ DTR/RTS...")
	}
	if err := f.hardReset(); err == nil {
		if f.isInBootloader() {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
			}
			return nil
		}
	}

	// –ú–µ—Ç–æ–¥ 2: –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ú–µ—Ç–æ–¥ 2: –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ DTR/RTS...")
	}
	if err := f.hardResetInverted(); err == nil {
		if f.isInBootloader() {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
			}
			return nil
		}
	}

	// –ú–µ—Ç–æ–¥ 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ú–µ—Ç–æ–¥ 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
	}
	if err := f.alternativeReset(); err == nil {
		if f.isInBootloader() {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
			}
			return nil
		}
	}

	// –ú–µ—Ç–æ–¥ 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ú–µ—Ç–æ–¥ 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏...")
	}
	for attempt := 0; attempt < 3; attempt++ {
		if f.callback != nil {
			f.callback.emitLog(fmt.Sprintf("   –ü–æ–ø—ã—Ç–∫–∞ %d/3...", attempt+1))
		}

		if err := f.aggressiveReset(); err == nil {
			if f.isInBootloader() {
				if f.callback != nil {
					f.callback.emitLog("‚úÖ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)")
				}
				return nil
			}
		}
		time.Sleep(500 * time.Millisecond)
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	if f.callback != nil {
		f.callback.emitLog("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
	}
	if f.testSync() {
		if f.callback != nil {
			f.callback.emitLog("‚úÖ ESP32 —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ bootloader!")
		}
		return nil
	}

	// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
	if f.callback != nil {
		f.callback.emitLog("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ bootloader –Ω–µ —É–¥–∞–ª—Å—è")
		f.callback.emitLog("")
		f.callback.emitLog("üîß –ü–û–ü–†–û–ë–£–ô–¢–ï –†–£–ß–ù–û–ô –†–ï–ñ–ò–ú:")
		f.callback.emitLog("   1. –û—Ç–∫–ª—é—á–∏—Ç–µ –∫–∞–±–µ–ª—å USB –æ—Ç ESP32")
		f.callback.emitLog("   2. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É BOOT (GPIO0)")
		f.callback.emitLog("   3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–±–µ–ª—å USB (–Ω–µ –æ—Ç–ø—É—Å–∫–∞—è BOOT)")
		f.callback.emitLog("   4. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É BOOT")
		f.callback.emitLog("   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É —Å–Ω–æ–≤–∞")
		f.callback.emitLog("")
		f.callback.emitLog("üîß –ò–õ–ò:")
		f.callback.emitLog("   1. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ BOOT")
		f.callback.emitLog("   2. –ù–∞–∂–º–∏—Ç–µ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç–µ RESET")
		f.callback.emitLog("   3. –û—Ç–ø—É—Å—Ç–∏—Ç–µ BOOT")
		f.callback.emitLog("")
		f.callback.emitLog("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ NewESP32FlasherManual() –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
	}

	return fmt.Errorf("failed to enter bootloader mode")
}

// hardReset —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞
func (f *ESP32Flasher) hardReset() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–±—Ä–æ—Å...")
	}

	f.port.SetDTR(true)  // GPIO0 = LOW
	f.port.SetRTS(false) // EN = HIGH
	time.Sleep(10 * time.Millisecond)

	f.port.SetRTS(true) // EN = LOW (reset)
	time.Sleep(SERIAL_FLASHER_RESET_HOLD_TIME_MS * time.Millisecond)

	f.port.SetRTS(false) // EN = HIGH
	time.Sleep(SERIAL_FLASHER_BOOT_HOLD_TIME_MS * time.Millisecond)

	f.port.SetDTR(false) // GPIO0 = HIGH
	time.Sleep(200 * time.Millisecond)

	return nil
}

// hardResetInverted –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞
func (f *ESP32Flasher) hardResetInverted() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±—Ä–æ—Å...")
	}

	f.port.SetDTR(false) // GPIO0 = LOW (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
	f.port.SetRTS(true)  // EN = HIGH (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
	time.Sleep(10 * time.Millisecond)

	f.port.SetRTS(false) // EN = LOW (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
	time.Sleep(SERIAL_FLASHER_RESET_HOLD_TIME_MS * time.Millisecond)

	f.port.SetRTS(true) // EN = HIGH (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
	time.Sleep(SERIAL_FLASHER_BOOT_HOLD_TIME_MS * time.Millisecond)

	f.port.SetDTR(true) // GPIO0 = HIGH (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
	time.Sleep(200 * time.Millisecond)

	return nil
}

// alternativeReset –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
func (f *ESP32Flasher) alternativeReset() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–±—Ä–æ—Å...")
	}

	f.port.SetDTR(false) // GPIO0 = HIGH
	f.port.SetRTS(false) // EN = HIGH
	time.Sleep(100 * time.Millisecond)

	f.port.SetDTR(true) // GPIO0 = LOW
	time.Sleep(100 * time.Millisecond)

	f.port.SetRTS(true) // EN = LOW
	time.Sleep(100 * time.Millisecond)

	f.port.SetRTS(false) // EN = HIGH
	time.Sleep(250 * time.Millisecond)

	f.port.SetDTR(false) // GPIO0 = HIGH
	time.Sleep(250 * time.Millisecond)

	return nil
}

// aggressiveReset –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞
func (f *ESP32Flasher) aggressiveReset() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–±—Ä–æ—Å...")
	}

	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()

	f.port.SetDTR(true) // GPIO0 = LOW
	f.port.SetRTS(true) // EN = LOW
	time.Sleep(200 * time.Millisecond)

	f.port.SetRTS(false) // EN = HIGH
	time.Sleep(300 * time.Millisecond)

	f.port.SetDTR(false) // GPIO0 = HIGH
	time.Sleep(100 * time.Millisecond)

	f.port.SetDTR(true) // GPIO0 = LOW —Å–Ω–æ–≤–∞
	time.Sleep(50 * time.Millisecond)
	f.port.SetDTR(false) // GPIO0 = HIGH
	time.Sleep(200 * time.Millisecond)

	return nil
}

// flashData –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) flashData(data []byte, seq uint32) error {
	header := make([]byte, 16)
	binary.LittleEndian.PutUint32(header[0:4], uint32(len(data)))
	binary.LittleEndian.PutUint32(header[4:8], seq)
	binary.LittleEndian.PutUint32(header[8:12], 0)
	binary.LittleEndian.PutUint32(header[12:16], 0)

	payload := append(header, data...)
	checksum := calculateChecksum(data)

	for attempt := 0; attempt < 3; attempt++ {
		if err := f.sendCommand(ESP_FLASH_DATA, payload, checksum); err != nil {
			if attempt == 2 {
				return fmt.Errorf("failed to send flash data after 3 attempts: %w", err)
			}
			time.Sleep(100 * time.Millisecond)
			continue
		}

		response, err := f.readResponseRobust(5 * time.Second)
		if err != nil {
			if attempt == 2 {
				return fmt.Errorf("flash data timeout at seq %d: %w", seq, err)
			}
			time.Sleep(100 * time.Millisecond)
			continue
		}

		if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_FLASH_DATA {
			if attempt == 2 {
				return fmt.Errorf("invalid flash data response at seq %d", seq)
			}
			time.Sleep(100 * time.Millisecond)
			continue
		}

		if len(response) >= 12 {
			status := response[len(response)-4]
			if status != 0x00 {
				return fmt.Errorf("flash data failed at seq %d with status: %d", seq, status)
			}
		}

		return nil
	}

	return fmt.Errorf("flash data failed after 3 attempts at seq %d", seq)
}

// flashBegin –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–∏–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) flashBegin(size, offset uint32) error {
	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üìã –ù–∞—á–∞–ª–æ –ø—Ä–æ—à–∏–≤–∫–∏: —Ä–∞–∑–º–µ—Ä %d –±–∞–π—Ç, –∞–¥—Ä–µ—Å 0x%x", size, offset))
	}

	numBlocks := (size + f.blockSize - 1) / f.blockSize
	eraseSize := ((size + ESP_FLASH_SECTOR - 1) / ESP_FLASH_SECTOR) * ESP_FLASH_SECTOR

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üßÆ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: %d –±–ª–æ–∫–æ–≤ –ø–æ %d –±–∞–π—Ç, —Å—Ç–∏—Ä–∞–Ω–∏–µ %d –±–∞–π—Ç",
			numBlocks, f.blockSize, eraseSize))
	}

	data := make([]byte, 16)
	binary.LittleEndian.PutUint32(data[0:4], eraseSize)
	binary.LittleEndian.PutUint32(data[4:8], numBlocks)
	binary.LittleEndian.PutUint32(data[8:12], f.blockSize)
	binary.LittleEndian.PutUint32(data[12:16], offset)

	if err := f.sendCommand(ESP_FLASH_BEGIN, data, 0); err != nil {
		return fmt.Errorf("failed to send flash begin: %w", err)
	}

	response, err := f.readResponseRobust(20 * time.Second) // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è
	if err != nil {
		return fmt.Errorf("flash begin timeout: %w", err)
	}

	if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_FLASH_BEGIN {
		return fmt.Errorf("invalid flash begin response")
	}

	if len(response) >= 12 {
		status := response[len(response)-4]
		if status != 0x00 {
			return fmt.Errorf("flash begin failed with status: %d", status)
		}
	}

	if f.callback != nil {
		f.callback.emitLog("‚úÖ Flash —Å—Ç–µ—Ä—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏")
	}

	return nil
}

// flashEnd –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–∏–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) flashEnd() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏...")
	}

	data := make([]byte, 4)
	binary.LittleEndian.PutUint32(data, 0) // Reboot = false

	if err := f.sendCommand(ESP_FLASH_END, data, 0); err != nil {
		return fmt.Errorf("failed to send flash end: %w", err)
	}

	response, err := f.readResponseRobust(5 * time.Second)
	if err != nil {
		return fmt.Errorf("flash end timeout: %w", err)
	}

	if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_FLASH_END {
		return fmt.Errorf("invalid flash end response")
	}

	if f.callback != nil {
		f.callback.emitLog("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}

	return nil
}

// FlashData –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—à–∏–≤–∫–∏
func (f *ESP32Flasher) FlashData(data []byte, offset uint32, portName string) error {
	// 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
	if f.callback != nil {
		f.callback.emitProgress(10, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
	}
	if err := f.sync(); err != nil {
		return fmt.Errorf("sync failed: %w", err)
	}

	// 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏–ø–∞
	if f.callback != nil {
		f.callback.emitProgress(20, "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏–ø–∞...")
	}
	if err := f.detectChip(); err != nil {
		return fmt.Errorf("chip detection failed: %w", err)
	}

	// 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SPI
	if f.callback != nil {
		f.callback.emitProgress(30, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SPI...")
	}
	if err := f.spiAttach(); err != nil {
		return fmt.Errorf("SPI attach failed: %w", err)
	}

	// 4. –ù–∞—á–∞–ª–æ –ø—Ä–æ—à–∏–≤–∫–∏
	if f.callback != nil {
		f.callback.emitProgress(40, "–°—Ç–∏—Ä–∞–Ω–∏–µ Flash...")
	}
	if err := f.flashBegin(uint32(len(data)), offset); err != nil {
		return fmt.Errorf("flash begin failed: %w", err)
	}

	// 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	totalBlocks := (len(data) + int(f.blockSize) - 1) / int(f.blockSize)

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üì§ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö (%d –±–ª–æ–∫–æ–≤ –ø–æ %d –±–∞–π—Ç)...", totalBlocks, f.blockSize))
		f.callback.emitProgress(50, "–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö...")
	}

	for seq := uint32(0); seq < uint32(totalBlocks); seq++ {
		start := int(seq) * int(f.blockSize)
		end := start + int(f.blockSize)
		if end > len(data) {
			end = len(data)
		}

		block := make([]byte, f.blockSize)
		copy(block, data[start:end])

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ 0xFF
		for i := end - start; i < int(f.blockSize); i++ {
			block[i] = 0xFF
		}

		if err := f.flashData(block, seq); err != nil {
			return fmt.Errorf("flash data failed at block %d/%d: %w", seq+1, totalBlocks, err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		if f.callback != nil {
			progress := 50 + int(float64(seq+1)/float64(totalBlocks)*40) // 50-90%
			percent := float64(seq+1) / float64(totalBlocks) * 100
			f.callback.emitProgress(progress, fmt.Sprintf("–ó–∞–ø–∏—Å—å %.1f%% (%d/%d –±–ª–æ–∫–æ–≤)", percent, seq+1, totalBlocks))

			if (seq+1)%10 == 0 || seq == uint32(totalBlocks-1) {
				f.callback.emitLog(fmt.Sprintf("üì¶ –ó–∞–ø–∏—Å–∞–Ω –±–ª–æ–∫ %d/%d (%.1f%%, %d –±–∞–π—Ç)", seq+1, totalBlocks, percent, end-start))
			}
		}
	}

	// 6. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	if f.callback != nil {
		f.callback.emitProgress(95, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
	}
	if err := f.flashEnd(); err != nil {
		return fmt.Errorf("flash end failed: %w", err)
	}

	if f.callback != nil {
		f.callback.emitProgress(100, "–ì–æ—Ç–æ–≤–æ!")
		f.callback.emitLog("üéâ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	}

	return nil
}

// SetBaudRate –∏–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏
func (f *ESP32Flasher) SetBaudRate(baudRate int) error {
	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ %d bps...", baudRate))
	}

	data := make([]byte, 8)
	binary.LittleEndian.PutUint32(data[0:4], uint32(baudRate))
	binary.LittleEndian.PutUint32(data[4:8], 0)

	if err := f.sendCommand(0x0F, data, 0); err != nil {
		return fmt.Errorf("failed to send baudrate change command: %w", err)
	}

	response, err := f.readResponse(1 * time.Second)
	if err != nil {
		return fmt.Errorf("baudrate change timeout: %w", err)
	}

	if len(response) < 8 || response[0] != 0x01 {
		return fmt.Errorf("invalid baudrate change response")
	}

	f.port.Close()

	mode := &serial.Mode{
		BaudRate: baudRate,
		Parity:   serial.NoParity,
		DataBits: 8,
		StopBits: serial.OneStopBit,
	}

	newPort, err := serial.Open(f.portName, mode)
	if err != nil {
		return fmt.Errorf("failed to reopen port with new baudrate: %w", err)
	}

	f.port = newPort
	time.Sleep(100 * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ %d bps", baudRate))
	}

	return nil
}

// RebootTarget –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç ESP32
func (f *ESP32Flasher) RebootTarget() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32...")
	}

	f.port.SetDTR(false) // GPIO0 = HIGH (normal mode)
	f.port.SetRTS(true)  // EN = LOW (reset)
	time.Sleep(100 * time.Millisecond)
	f.port.SetRTS(false) // EN = HIGH (release reset)

	if f.callback != nil {
		f.callback.emitLog("‚úÖ ESP32 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
	}

	return nil
}
