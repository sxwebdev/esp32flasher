package main

import (
	"context"
	"fmt"
	"os"

	"github.com/wailsapp/wails/v2/pkg/runtime"
	serialport "go.bug.st/serial"
)

// App struct
type App struct {
	ctx context.Context
}

// NewApp creates a new App application struct
func NewApp() *App {
	return &App{}
}

// ListPorts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤
func (a *App) ListPorts() ([]string, error) {
	return serialport.GetPortsList()
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx
}

// ChooseFile –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
func (a *App) ChooseFile() (string, error) {
	filePath, err := runtime.OpenFileDialog(a.ctx, runtime.OpenDialogOptions{
		Title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏",
		Filters: []runtime.FileFilter{
			{
				DisplayName: "Firmware Files",
				Pattern:     "*.bin",
			},
		},
	})

	return filePath, err
}

// emitProgress –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ frontend
func (a *App) emitProgress(progress int, message string) {
	runtime.EventsEmit(a.ctx, "flash-progress", map[string]interface{}{
		"progress": progress,
		"message":  message,
	})
}

// emitLog –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ frontend
func (a *App) emitLog(message string) {
	runtime.EventsEmit(a.ctx, "flash-log", message)
}

// Flash –ø—Ä–æ—à–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ application.bin –Ω–∞ –∞–¥—Ä–µ—Å 0x10000 –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é esptool
func (a *App) Flash(portName, filePath string) error {
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		return fmt.Errorf("file does not exist: %s", filePath)
	}

	a.emitProgress(0, "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É...")
	a.emitLog("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

	// –°—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
	data, err := os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("failed to read file: %w", err)
	}

	a.emitProgress(10, "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
	a.emitLog(fmt.Sprintf("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: %d –±–∞–π—Ç", len(data)))

	// –°–æ–∑–¥–∞—Ç—å ESP32 —Ñ–ª–µ—à–µ—Ä
	flasher, err := NewESP32FlasherWithProgress(portName, a)
	if err != nil {
		return fmt.Errorf("failed to create flasher: %w", err)
	}
	defer flasher.Close()

	a.emitProgress(20, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32...")
	a.emitLog("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32...")

	// –ü—Ä–æ—à–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
	if err := flasher.FlashData(data, 0x10000); err != nil {
		a.emitProgress(0, "–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏")
		return fmt.Errorf("failed to flash: %w", err)
	}

	a.emitProgress(100, "–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	a.emitLog("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

	return nil
}
