package main

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/wailsapp/wails/v2/pkg/runtime"
	serialport "go.bug.st/serial"
)

// App struct
type App struct {
	ctx         context.Context
	monitorPort serialport.Port
	stopMonitor chan bool
	lineBuffer  string // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫
}

// NewApp creates a new App application struct
func NewApp() *App {
	return &App{}
}

// ListPorts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ COM-–ø–æ—Ä—Ç–æ–≤
func (a *App) ListPorts() ([]string, error) {
	return serialport.GetPortsList()
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx
}

// ChooseFile –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
func (a *App) ChooseFile() (string, error) {
	filePath, err := runtime.OpenFileDialog(a.ctx, runtime.OpenDialogOptions{
		Title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏",
		Filters: []runtime.FileFilter{
			{
				DisplayName: "Firmware Files",
				Pattern:     "*.bin",
			},
		},
	})

	return filePath, err
}

// emitProgress –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ frontend
func (a *App) emitProgress(progress int, message string) {
	runtime.EventsEmit(a.ctx, "flash-progress", map[string]interface{}{
		"progress": progress,
		"message":  message,
	})
}

// emitLog –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ frontend
func (a *App) emitLog(message string) {
	runtime.EventsEmit(a.ctx, "flash-log", message)
}

// Flash –ø—Ä–æ—à–∏–≤–∞–µ—Ç application.bin –Ω–∞ –∞–¥—Ä–µ—Å 0x10000 - –í–ï–†–°–ò–Ø –î–õ–Ø –ü–û–í–†–ï–ñ–î–ï–ù–ù–û–ì–û FLASH
func (a *App) Flash(portName, filePath string) error {
	// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		return fmt.Errorf("file does not exist: %s", filePath)
	}

	a.emitProgress(0, "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É...")
	a.emitLog("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")

	// –°—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
	data, err := os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("failed to read file: %w", err)
	}

	a.emitProgress(10, "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
	a.emitLog(fmt.Sprintf("üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: %d –±–∞–π—Ç", len(data)))

	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
	a.emitProgress(20, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32...")
	a.emitLog("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ESP32...")
	a.emitLog("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ checksum –≤ flash")
	a.emitLog("üí° ESP32 –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ flash")

	flasher, err := NewESP32FlasherWithProgress(portName, a)
	if err != nil {
		a.emitLog("‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
		a.emitLog("üîÑ –î–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ flash –ø–æ–ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º...")

		// –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ flash
		a.emitLog("")
		a.emitLog("=== –†–ï–ñ–ò–ú –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–û–í–†–ï–ñ–î–ï–ù–ù–û–ì–û FLASH ===")
		a.emitLog("–í–∞—à ESP32 –∏–º–µ–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π flash (csum err), –Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º–æ!")
		a.emitLog("")
		a.emitLog("–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
		a.emitLog("1. ESP32 –¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
		a.emitLog("2. –ù–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ BOOT –∏ RESET –Ω–∞ –ø–ª–∞—Ç–µ")
		a.emitLog("3. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É BOOT (GPIO0)")
		a.emitLog("4. –ù–∞–∂–º–∏—Ç–µ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É RESET")
		a.emitLog("5. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É BOOT")
		a.emitLog("6. ESP32 –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è")
		a.emitLog("7. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

		// –ñ–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		fmt.Print("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ ESP32 —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")
		fmt.Scanln()

		// –ü—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º
		flasher, err = NewESP32FlasherManual(portName, a)
		if err != nil {
			return fmt.Errorf("failed to create flasher in manual mode: %w", err)
		}
	}
	defer flasher.Close()

	// –ù–ï –ø—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ flash
	a.emitLog("‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π flash - –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å 115200 –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")

	// –ü—Ä–æ—à–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 30%)
	if err := flasher.FlashData(data, 0x10000, portName); err != nil {
		a.emitProgress(0, "–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏")
		return fmt.Errorf("failed to flash: %w", err)
	}

	// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º ESP32 –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
	a.emitLog("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ ESP32...")
	flasher.RebootTarget()

	a.emitProgress(100, "–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	a.emitLog("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	a.emitLog("üí° Flash –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - ESP32 –±–æ–ª—å—à–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è")

	return nil
}

// FlashWithRetry - –≤–µ—Ä—Å–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
func (a *App) FlashWithRetry(portName, filePath string, maxAttempts int) error {
	for attempt := 1; attempt <= maxAttempts; attempt++ {
		a.emitLog(fmt.Sprintf("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ %d/%d", attempt, maxAttempts))

		err := a.Flash(portName, filePath)
		if err == nil {
			return nil // –£—Å–ø–µ—Ö!
		}

		a.emitLog(fmt.Sprintf("‚ùå –ü–æ–ø—ã—Ç–∫–∞ %d –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", attempt, err))

		if attempt < maxAttempts {
			a.emitLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
			// time.Sleep(2 * time.Second) // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
		}
	}

	return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—à–∏—Ç—å –ø–æ—Å–ª–µ %d –ø–æ–ø—ã—Ç–æ–∫", maxAttempts)
}

// FlashMultipleFiles - –ø—Ä–æ—à–∏–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
func (a *App) FlashMultipleFiles(portName string, files map[string]uint32) error {
	// files - –∫–∞—Ä—Ç–∞ filename -> offset
	// –ù–∞–ø—Ä–∏–º–µ—Ä: {"bootloader.bin": 0x1000, "app.bin": 0x10000, "partitions.bin": 0x8000}

	a.emitLog("üîÑ –†–µ–∂–∏–º –ø—Ä–æ—à–∏–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")

	// –°–æ–∑–¥–∞–µ–º —Ñ–ª–µ—à–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑
	flasher, err := NewESP32FlasherWithProgress(portName, a)
	if err != nil {
		// Fallback –Ω–∞ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º
		a.emitLog("‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–∏...")
		flasher, err = NewESP32FlasherManual(portName, a)
		if err != nil {
			return fmt.Errorf("failed to create flasher: %w", err)
		}
	}
	defer flasher.Close()

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
	flasher.SetBaudRate(460800)

	// –ü—Ä–æ—à–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
	fileCount := 0
	totalFiles := len(files)

	for filename, offset := range files {
		fileCount++
		a.emitLog(fmt.Sprintf("üìÑ –ü—Ä–æ—à–∏–≤–∫–∞ —Ñ–∞–π–ª–∞ %d/%d: %s -> 0x%x", fileCount, totalFiles, filename, offset))

		data, err := os.ReadFile(filename)
		if err != nil {
			return fmt.Errorf("failed to read file %s: %w", filename, err)
		}

		if err := flasher.FlashData(data, offset, portName); err != nil {
			return fmt.Errorf("failed to flash %s: %w", filename, err)
		}
	}

	flasher.RebootTarget()
	a.emitLog("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—à–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ!")
	return nil
}

// MonitorPort —Å–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ—Ä—Ç–æ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª —Å –¥–∞–Ω–Ω—ã–º–∏
func (a *App) MonitorPort(portName string, baudRate int) error {
	// –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
	if a.monitorPort != nil {
		a.StopMonitor()
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	mode := &serialport.Mode{
		BaudRate: baudRate,
		Parity:   serialport.NoParity,
		DataBits: 8,
		StopBits: serialport.OneStopBit,
	}

	port, err := serialport.Open(portName, mode)
	if err != nil {
		return fmt.Errorf("failed to open port for monitoring: %w", err)
	}

	a.monitorPort = port
	a.stopMonitor = make(chan bool, 1)
	a.lineBuffer = "" // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å—Ç—Ä–æ–∫

	a.emitLog(fmt.Sprintf("üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç–∞ %s (%d baud)", portName, baudRate))
	a.emitLog("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–æ–ø'")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	go func() {
		defer func() {
			// –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
			if a.monitorPort != nil {
				a.monitorPort.Close()
				a.monitorPort = nil
			}
		}()

		buffer := make([]byte, 1024)

		for {
			select {
			case <-a.stopMonitor:
				return
			default:
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç –µ—â–µ –æ—Ç–∫—Ä—ã—Ç
				if a.monitorPort == nil {
					return
				}

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
				if err := a.monitorPort.SetReadTimeout(50 * time.Millisecond); err != nil {
					return
				}

				n, err := a.monitorPort.Read(buffer)
				if err != nil {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ timeout - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
					if strings.Contains(err.Error(), "timeout") {
						continue
					}
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "bad file descriptor" - –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –±–µ–∑ –æ—à–∏–±–∫–∏
					if strings.Contains(err.Error(), "bad file descriptor") ||
						strings.Contains(err.Error(), "file already closed") {
						return
					}
					// –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –∏ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
					runtime.EventsEmit(a.ctx, "monitor-error", err.Error())
					return
				}

				if n > 0 {
					// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –±—É—Ñ–µ—Ä—É
					a.lineBuffer += string(buffer[:n])

					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
					for {
						newlineIdx := strings.Index(a.lineBuffer, "\n")
						if newlineIdx == -1 {
							// –ù–µ—Ç –ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫, –∂–¥–µ–º –µ—â–µ –¥–∞–Ω–Ω—ã—Ö
							break
						}

						// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É
						line := a.lineBuffer[:newlineIdx]
						a.lineBuffer = a.lineBuffer[newlineIdx+1:]

						// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã \r –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
						line = strings.TrimSpace(line)
						if line != "" {
							runtime.EventsEmit(a.ctx, "monitor-data", line)
						}
					}

					// –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –±–µ–∑ \n, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –∏ –æ—á–∏—â–∞–µ–º
					if len(a.lineBuffer) > 1000 { // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
						line := strings.TrimSpace(a.lineBuffer)
						if line != "" {
							runtime.EventsEmit(a.ctx, "monitor-data", line)
						}
						a.lineBuffer = ""
					}
				}
			}
		}
	}()

	return nil
}

// StopMonitor –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç–∞
func (a *App) StopMonitor() {
	// –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	if a.stopMonitor != nil {
		select {
		case a.stopMonitor <- true:
		default:
			// –ö–∞–Ω–∞–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω
		}
		close(a.stopMonitor)
		a.stopMonitor = nil
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –≥–æ—Ä—É—Ç–∏–Ω–µ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	time.Sleep(200 * time.Millisecond)

	// –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
	if a.monitorPort != nil {
		a.monitorPort.Close()
		a.monitorPort = nil
	}

	a.lineBuffer = "" // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Å—Ç—Ä–æ–∫

	runtime.EventsEmit(a.ctx, "monitor-stop", "")
	a.emitLog("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
