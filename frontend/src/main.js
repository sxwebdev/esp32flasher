import { ListPorts, Flash, ChooseFile } from "../wailsjs/go/main/App.js";
import { EventsOn } from "../wailsjs/runtime/runtime.js";

const portSelect = document.getElementById("portSelect");
const btnRefresh = document.getElementById("btnRefresh");
const btnChoose = document.getElementById("btnChoose");
const btnFlash = document.getElementById("btnFlash");
const filePath = document.getElementById("filePath");
const logArea = document.getElementById("log");
const progressContainer = document.getElementById("progressContainer");
const progressBar = document.getElementById("progressBar");
const progressText = document.getElementById("progressText");

// –ó–∞–ª–∏—Ç—å –ª–æ–≥
function log(msg) {
  const timestamp = new Date().toLocaleTimeString();
  logArea.textContent += `[${timestamp}] ${msg}\n`;
  
  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  logArea.scrollTop = logArea.scrollHeight;
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)
  const lines = logArea.textContent.split('\n');
  if (lines.length > 1000) {
    logArea.textContent = lines.slice(-1000).join('\n');
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
function updateProgress(progress, message) {
  progressBar.style.width = `${progress}%`;
  progressText.textContent = `${progress}%`;
  if (message) {
    log(message);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
function showProgress(show) {
  progressContainer.style.display = show ? 'block' : 'none';
  if (!show) {
    progressBar.style.width = '0%';
    progressText.textContent = '0%';
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
EventsOn("flash-progress", (data) => {
  updateProgress(data.progress, data.message);
});

EventsOn("flash-log", (message) => {
  log(message);
});

// –ü–æ–ª—É—á–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—ã
async function refreshPorts() {
  portSelect.innerHTML = "";
  try {
    const ports = await ListPorts();
    ports.forEach((p) => {
      const o = document.createElement("option");
      o.value = p;
      o.textContent = p;
      portSelect.appendChild(o);
    });
    log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: ${ports.length}`);
  } catch (e) {
    log("–û—à–∏–±–∫–∞ ListPorts: " + e);
  }
}

// –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
btnChoose.addEventListener("click", async () => {
  try {
    const res = await ChooseFile();
    if (res) {
      filePath.value = res;
      log("–í—ã–±—Ä–∞–Ω " + res);
    }
  } catch (e) {
    log("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: " + e);
  }
});

// –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ—à–∏—Ç—å¬ª
btnFlash.addEventListener("click", async () => {
  const port = portSelect.value;
  const file = filePath.value;
  if (!port || !file) {
    alert("–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –∏ —Ñ–∞–π–ª!");
    return;
  }

  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  btnFlash.disabled = true;
  btnChoose.disabled = true;
  btnRefresh.disabled = true;
  portSelect.disabled = true;

  // –û—á–∏—â–∞–µ–º –ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  logArea.textContent = "";
  showProgress(true);

  log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É ${file} ‚Üí ${port}`);
  
  try {
    await Flash(port, file);
    log("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    setTimeout(() => {
      alert("–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    }, 100);
  } catch (e) {
    log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: " + e);
    updateProgress(0, "–û—à–∏–±–∫–∞");
    setTimeout(() => {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: " + e);
    }, 100);
  } finally {
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    setTimeout(() => {
      showProgress(false);
      btnFlash.disabled = false;
      btnChoose.disabled = false;
      btnRefresh.disabled = false;
      portSelect.disabled = false;
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  }
});

// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
btnRefresh.addEventListener("click", refreshPorts);
refreshPorts();
