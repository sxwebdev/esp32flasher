import {
  ListPorts,
  Flash,
  ChooseFile,
  MonitorPort,
  StopMonitor,
} from "../wailsjs/go/main/App.js";
import { EventsOn } from "../wailsjs/runtime/runtime.js";

const portSelect = document.getElementById("portSelect");
const baudSelect = document.getElementById("baudSelect");
const btnRefresh = document.getElementById("btnRefresh");
const btnChoose = document.getElementById("btnChoose");
const btnFlash = document.getElementById("btnFlash");
const btnMonitor = document.getElementById("btnMonitor");
const btnStopMonitor = document.getElementById("btnStopMonitor");
const btnClearLog = document.getElementById("btnClearLog");
const btnAutoScroll = document.getElementById("btnAutoScroll");
const filePath = document.getElementById("filePath");
const logArea = document.getElementById("log");
const progressContainer = document.getElementById("progressContainer");
const progressBar = document.getElementById("progressBar");
const progressText = document.getElementById("progressText");

let isMonitoring = false;
let logUpdateTimeout = null; // –î–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–≥–∞
let autoScrollEnabled = true; // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let logLines = []; // –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const MAX_LOG_LINES = 1000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫

// –ó–∞–ª–∏—Ç—å –ª–æ–≥
function log(msg) {
  const timestamp = new Date().toLocaleTimeString();
  addLogLine(`[${timestamp}] ${msg}`);
}

// –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ª–æ–≥
function addLogLine(line) {
  logLines.push(line);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–∞–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
  if (logLines.length > MAX_LOG_LINES) {
    logLines = logLines.slice(-MAX_LOG_LINES);
  }

  // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  logArea.textContent = logLines.join("\n");

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
  if (autoScrollEnabled) {
    logArea.scrollTop = logArea.scrollHeight;
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
function updateProgress(progress, message) {
  progressBar.style.width = `${progress}%`;
  progressText.textContent = `${progress}%`;
  if (message) {
    log(message);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
function showProgress(show) {
  progressContainer.style.display = show ? "block" : "none";
  if (!show) {
    progressBar.style.width = "0%";
    progressText.textContent = "0%";
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
EventsOn("flash-progress", (data) => {
  updateProgress(data.progress, data.message);
});

EventsOn("flash-log", (message) => {
  log(message);
});

// –°–æ–±—ã—Ç–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç–∞
EventsOn("monitor-data", (data) => {
  // –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Å—Ä–∞–∑—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
  if (data.trim()) {
    const timestamp = new Date().toLocaleTimeString();
    const logLine = `[${timestamp}] ${data.trim()}`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å—Ä–∞–∑—É –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    logLines.push(logLine);
    if (logLines.length > MAX_LOG_LINES) {
      logLines = logLines.slice(-MAX_LOG_LINES);
    }

    // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –±–∞—Ç—á–∏–Ω–≥–∞
    logArea.textContent = logLines.join("\n");

    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    if (autoScrollEnabled) {
      logArea.scrollTop = logArea.scrollHeight;
    }
  }
});

EventsOn("monitor-error", (error) => {
  log(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error}`);
  stopMonitoring();
});

EventsOn("monitor-stop", () => {
  stopMonitoring();
});

// –ü–æ–ª—É—á–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—ã
async function refreshPorts() {
  portSelect.innerHTML = "";
  try {
    const ports = await ListPorts();
    ports.forEach((p) => {
      const o = document.createElement("option");
      o.value = p;
      o.textContent = p;
      portSelect.appendChild(o);
    });
    log(`–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ä—Ç–æ–≤: ${ports.length}`);
  } catch (e) {
    log("–û—à–∏–±–∫–∞ ListPorts: " + e);
  }
}

// –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
btnChoose.addEventListener("click", async () => {
  try {
    const res = await ChooseFile();
    if (res) {
      filePath.value = res;
      log("–í—ã–±—Ä–∞–Ω " + res);
    }
  } catch (e) {
    log("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: " + e);
  }
});

// –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ—à–∏—Ç—å¬ª
btnFlash.addEventListener("click", async () => {
  const port = portSelect.value;
  const file = filePath.value;
  if (!port || !file) {
    alert("–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –∏ —Ñ–∞–π–ª!");
    return;
  }

  if (isMonitoring) {
    alert("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–¥ –ø—Ä–æ—à–∏–≤–∫–æ–π!");
    return;
  }

  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  btnFlash.disabled = true;
  btnChoose.disabled = true;
  btnRefresh.disabled = true;
  btnMonitor.disabled = true;
  portSelect.disabled = true;
  baudSelect.disabled = true;

  // –û—á–∏—â–∞–µ–º –ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  logArea.textContent = "";
  showProgress(true);

  log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É ${file} ‚Üí ${port}`);

  try {
    await Flash(port, file);
    log("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    setTimeout(() => {
      alert("–ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    }, 100);
  } catch (e) {
    log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: " + e);
    updateProgress(0, "–û—à–∏–±–∫–∞");
    setTimeout(() => {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: " + e);
    }, 100);
  } finally {
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    setTimeout(() => {
      showProgress(false);
      btnFlash.disabled = false;
      btnChoose.disabled = false;
      btnRefresh.disabled = false;
      btnMonitor.disabled = false;
      portSelect.disabled = false;
      baudSelect.disabled = false;
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  }
});

// –ö–Ω–æ–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç–∞
btnMonitor.addEventListener("click", async () => {
  const port = portSelect.value;
  const baud = parseInt(baudSelect.value);
  if (!port) {
    alert("–í—ã–±–µ—Ä–∏—Ç–µ COM-–ø–æ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!");
    return;
  }

  try {
    // –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    logArea.textContent = "";

    await MonitorPort(port, baud);
    startMonitoring();
    log(`üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ä—Ç–∞ ${port} –∑–∞–ø—É—â–µ–Ω (${baud} baud)`);
  } catch (e) {
    log("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: " + e);
    alert("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: " + e);
  }
});

// –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
btnStopMonitor.addEventListener("click", async () => {
  try {
    await StopMonitor();
    stopMonitoring();
  } catch (e) {
    log("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: " + e);
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startMonitoring() {
  isMonitoring = true;
  btnMonitor.style.display = "none";
  btnStopMonitor.style.display = "inline-block";
  btnFlash.disabled = true;
  portSelect.disabled = true;
  baudSelect.disabled = true;
}

function stopMonitoring() {
  isMonitoring = false;
  btnMonitor.style.display = "inline-block";
  btnStopMonitor.style.display = "none";
  btnFlash.disabled = false;
  portSelect.disabled = false;
  baudSelect.disabled = false;

  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if (logUpdateTimeout) {
    clearTimeout(logUpdateTimeout);
    logUpdateTimeout = null;
  }
}

// –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
btnClearLog.addEventListener("click", () => {
  logLines = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  logArea.textContent = "";
  log("üóëÔ∏è –õ–æ–≥ –æ—á–∏—â–µ–Ω");
});

// –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
btnAutoScroll.addEventListener("click", () => {
  autoScrollEnabled = !autoScrollEnabled;

  if (autoScrollEnabled) {
    btnAutoScroll.classList.add("active");
    btnAutoScroll.textContent = "üìú –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª";
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª, —Å—Ä–∞–∑—É –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
    requestAnimationFrame(() => {
      logArea.scrollTop = logArea.scrollHeight;
    });
    log("üìú –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–∫–ª—é—á–µ–Ω");
  } else {
    btnAutoScroll.classList.remove("active");
    btnAutoScroll.textContent = "üìú –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª";
    log("‚è∏Ô∏è –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –æ—Ç–∫–ª—é—á–µ–Ω");
  }
});

// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
btnRefresh.addEventListener("click", refreshPorts);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
if (autoScrollEnabled) {
  btnAutoScroll.classList.add("active");
  btnAutoScroll.textContent = "üìú –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª";
} else {
  btnAutoScroll.classList.remove("active");
  btnAutoScroll.textContent = "üìú –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª";
}

refreshPorts();
