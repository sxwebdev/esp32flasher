package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"strings"
	"time"

	"go.bug.st/serial"
)

// ESP32 –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–æ–º–∞–Ω–¥
const (
	ESP_FLASH_BEGIN = 0x02
	ESP_FLASH_DATA  = 0x03
	ESP_FLASH_END   = 0x04
	ESP_MEM_BEGIN   = 0x05
	ESP_MEM_END     = 0x06
	ESP_MEM_DATA    = 0x07
	ESP_SYNC        = 0x08
	ESP_WRITE_REG   = 0x09
	ESP_READ_REG    = 0x0a
	ESP_SPI_ATTACH  = 0x0d

	// SLIP –ø—Ä–æ—Ç–æ–∫–æ–ª
	SLIP_END     = 0xc0
	SLIP_ESC     = 0xdb
	SLIP_ESC_END = 0xdc
	SLIP_ESC_ESC = 0xdd

	// –†–∞–∑–º–µ—Ä—ã
	ESP_FLASH_SECTOR = 4096
	ESP_FLASH_BLOCK  = 65536

	// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∞–π–º–∏–Ω–≥–∞ —Å–±—Ä–æ—Å–∞ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ esp-serial-flasher
	// https://github.com/espressif/esp-serial-flasher
	SERIAL_FLASHER_RESET_HOLD_TIME_MS = 100 // –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è RESET –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	SERIAL_FLASHER_BOOT_HOLD_TIME_MS  = 50  // –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è BOOT (GPIO0) –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
)

// ProgressCallback –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–ª–ª–±–µ–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
type ProgressCallback interface {
	emitProgress(progress int, message string)
	emitLog(message string)
}

// ESP32Flasher - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ESP32
type ESP32Flasher struct {
	port     serial.Port
	portName string
	callback ProgressCallback
}

// NewESP32Flasher —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–ª–µ—à–µ—Ä–∞
func NewESP32Flasher(portName string) (*ESP32Flasher, error) {
	mode := &serial.Mode{
		BaudRate: 115200,
		Parity:   serial.NoParity,
		DataBits: 8,
		StopBits: serial.OneStopBit,
	}

	port, err := serial.Open(portName, mode)
	if err != nil {
		return nil, fmt.Errorf("failed to open port: %w", err)
	}

	return &ESP32Flasher{
		port:     port,
		portName: portName,
	}, nil
}

// NewESP32FlasherWithProgress —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–ª–µ—à–µ—Ä–∞ —Å –∫–æ–ª–ª–±–µ–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func NewESP32FlasherWithProgress(portName string, callback ProgressCallback) (*ESP32Flasher, error) {
	// –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∏–∑–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
	mode := &serial.Mode{
		BaudRate: 115200,
		Parity:   serial.NoParity,
		DataBits: 8,
		StopBits: serial.OneStopBit,
	}

	port, err := serial.Open(portName, mode)
	if err != nil {
		return nil, fmt.Errorf("failed to open port: %w", err)
	}

	flasher := &ESP32Flasher{
		port:     port,
		portName: portName,
		callback: callback,
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏
	if err := flasher.enterBootloader(); err != nil {
		if callback != nil {
			callback.emitLog("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏")
			callback.emitLog("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ESP32 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑–∫–∏ (boot mode)")
		}
		return nil, fmt.Errorf("ESP32 –Ω–µ –≤ —Ä–µ–∂–∏–º–µ bootloader: %w", err)
	}

	return flasher, nil
}

// enterBootloader –ø–µ—Ä–µ–≤–æ–¥–∏—Ç ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Espressif
func (f *ESP32Flasher) enterBootloader() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ü–µ—Ä–µ–≤–æ–¥ ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏...")
		f.callback.emitLog("üìò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∞–ª–æ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è esp-serial-flasher v0.3.0")
	}

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(50 * time.Millisecond)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å USB-UART –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
	if err := f.usbSerialConverterEnterBootloader(); err == nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º bootloader
		if f.testBootloaderMode() {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ ESP32 —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º bootloader")
			}
			return nil
		}
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	if f.callback != nil {
		f.callback.emitLog("‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é...")
	}

	if err := f.usbSerialConverterEnterBootloaderInverted(); err == nil {
		if f.testBootloaderMode() {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ ESP32 —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º bootloader (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
			}
			return nil
		}
	}

	// –ï—Å–ª–∏ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
	if f.callback != nil {
		f.callback.emitLog("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ bootloader –Ω–µ —É–¥–∞–ª—Å—è")
		f.callback.emitLog("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
		f.callback.emitLog("   ‚Ä¢ GPIO0 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ DTR")
		f.callback.emitLog("   ‚Ä¢ EN (RESET) –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ RTS")
		f.callback.emitLog("   ‚Ä¢ –°–∏–ª—å–Ω—ã–µ pull-up —Ä–µ–∑–∏—Å—Ç–æ—Ä—ã –Ω–∞ GPIO0")
		f.callback.emitLog("   ‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π USB-UART —á–∏–ø")
		f.callback.emitLog("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –†–£–ß–ù–û–ô —Ä–µ–∂–∏–º:")
		f.callback.emitLog("   1. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É BOOT (GPIO0)")
		f.callback.emitLog("   2. –ù–∞–∂–º–∏—Ç–µ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É RESET (EN)")
		f.callback.emitLog("   3. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É BOOT")
		f.callback.emitLog("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É —Å–Ω–æ–≤–∞")
	}

	return fmt.Errorf("failed to enter bootloader mode")
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (f *ESP32Flasher) Close() error {
	return f.port.Close()
}

// slipEncode –∫–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ SLIP –ø—Ä–æ—Ç–æ–∫–æ–ª
func slipEncode(data []byte) []byte {
	var buf bytes.Buffer
	buf.WriteByte(SLIP_END)

	for _, b := range data {
		switch b {
		case SLIP_END:
			buf.WriteByte(SLIP_ESC)
			buf.WriteByte(SLIP_ESC_END)
		case SLIP_ESC:
			buf.WriteByte(SLIP_ESC)
			buf.WriteByte(SLIP_ESC_ESC)
		default:
			buf.WriteByte(b)
		}
	}

	buf.WriteByte(SLIP_END)
	return buf.Bytes()
}

// slipDecode –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç SLIP –ø–∞–∫–µ—Ç
func slipDecode(data []byte) ([]byte, error) {
	if len(data) < 2 || data[0] != SLIP_END || data[len(data)-1] != SLIP_END {
		return nil, fmt.Errorf("invalid SLIP packet")
	}

	var buf bytes.Buffer
	escaped := false

	for i := 1; i < len(data)-1; i++ {
		b := data[i]
		if escaped {
			switch b {
			case SLIP_ESC_END:
				buf.WriteByte(SLIP_END)
			case SLIP_ESC_ESC:
				buf.WriteByte(SLIP_ESC)
			default:
				return nil, fmt.Errorf("invalid escape sequence")
			}
			escaped = false
		} else if b == SLIP_ESC {
			escaped = true
		} else {
			buf.WriteByte(b)
		}
	}

	return buf.Bytes(), nil
}

// sendCommand –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ ESP32
func (f *ESP32Flasher) sendCommand(cmd byte, data []byte, checksum uint32) error {
	// –°–æ–∑–¥–∞–µ–º –ø–∞–∫–µ—Ç –∫–æ–º–∞–Ω–¥—ã
	packet := make([]byte, 8+len(data))
	packet[0] = 0x00                                              // Direction (request)
	packet[1] = cmd                                               // Command
	binary.LittleEndian.PutUint16(packet[2:4], uint16(len(data))) // Size
	binary.LittleEndian.PutUint32(packet[4:8], checksum)          // Checksum
	copy(packet[8:], data)                                        // Data

	// –ö–æ–¥–∏—Ä—É–µ–º –≤ SLIP –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	encoded := slipEncode(packet)
	_, err := f.port.Write(encoded)
	return err
}

// readResponse —á–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç ESP32 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) readResponse(timeout time.Duration) ([]byte, error) {
	f.port.SetReadTimeout(timeout)

	var allData bytes.Buffer
	buffer := make([]byte, 1024)

	start := time.Now()

	// –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	for time.Since(start) < timeout {
		n, err := f.port.Read(buffer)
		if err != nil && n == 0 {
			if allData.Len() > 0 {
				break // –ï—Å–ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –∂–¥–∞—Ç—å
			}
			time.Sleep(1 * time.Millisecond)
			continue
		}

		if n > 0 {
			allData.Write(buffer[:n])
			// –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			time.Sleep(10 * time.Millisecond)
		}
	}

	if allData.Len() == 0 {
		return nil, fmt.Errorf("timeout reading response after %v", timeout)
	}

	rawData := allData.Bytes()

	// –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üîç –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (%d –±–∞–π—Ç): %x", len(rawData), rawData))
	}

	// –ò—â–µ–º SLIP –ø–∞–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
	for i := 0; i < len(rawData); i++ {
		if rawData[i] == SLIP_END {
			// –ù–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–∞, –∏—â–µ–º –∫–æ–Ω–µ—Ü
			for j := i + 1; j < len(rawData); j++ {
				if rawData[j] == SLIP_END {
					// –ù–∞—à–ª–∏ –∫–æ–Ω–µ—Ü –ø–∞–∫–µ—Ç–∞
					slipPacket := rawData[i : j+1]
					if f.callback != nil {
						f.callback.emitLog(fmt.Sprintf("üîç –ù–∞–π–¥–µ–Ω SLIP –ø–∞–∫–µ—Ç (%d –±–∞–π—Ç): %x", len(slipPacket), slipPacket))
					}

					decoded, err := slipDecode(slipPacket)
					if err != nil {
						if f.callback != nil {
							f.callback.emitLog(fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è SLIP: %v", err))
						}
						continue
					}

					if f.callback != nil {
						f.callback.emitLog(fmt.Sprintf("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç (%d –±–∞–π—Ç): %x", len(decoded), decoded))
					}

					return decoded, nil
				}
			}
		}
	}

	// –ï—Å–ª–∏ SLIP –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	if f.callback != nil {
		f.callback.emitLog("‚ö†Ô∏è SLIP –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
	}

	return rawData, nil
}

// sync —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å ESP32 —Ç–æ—á–Ω–æ –∫–∞–∫ esptool.py
// sync —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å ESP32 (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ reset)
func (f *ESP32Flasher) sync() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å ESP32...")
	}

	// Sync –∫–æ–º–∞–Ω–¥–∞ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ esptool.py: 0x07 0x07 0x12 0x20 + 32 –±–∞–π—Ç–∞ 0x55
	syncData := make([]byte, 36)
	syncData[0] = 0x07
	syncData[1] = 0x07
	syncData[2] = 0x12
	syncData[3] = 0x20
	for i := 4; i < 36; i++ {
		syncData[i] = 0x55
	}

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(100 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SYNC –∫–æ–º–∞–Ω–¥—É
	if err := f.sendCommand(ESP_SYNC, syncData, 0); err != nil {
		return fmt.Errorf("failed to send sync command: %w", err)
	}

	if f.callback != nil {
		f.callback.emitLog("üì§ SYNC –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
	}

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	response, err := f.readResponse(3 * time.Second)
	if err != nil {
		return fmt.Errorf("timeout reading sync response: %w", err)
	}

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π %d –±–∞–π—Ç: %x", len(response), response))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ SYNC
	if len(response) < 8 {
		return fmt.Errorf("sync response too short: %d bytes", len(response))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫: direction=0x01, command=ESP_SYNC
	if response[0] != 0x01 || response[1] != ESP_SYNC {
		return fmt.Errorf("invalid sync response header: dir=0x%02x, cmd=0x%02x", response[0], response[1])
	}

	// ESP32 ROM loader –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 4 –±–∞–π—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç stub loader —Å 2 –±–∞–π—Ç–∞–º–∏)
	if len(response) >= 12 {
		status := response[len(response)-4] // –°—Ç–∞—Ç—É—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 4-–º –±–∞–π—Ç–µ —Å –∫–æ–Ω—Ü–∞
		if status != 0x00 {
			errorCode := response[len(response)-3] // –û—à–∏–±–∫–∞ –≤ 3-–º –±–∞–π—Ç–µ —Å –∫–æ–Ω—Ü–∞
			return fmt.Errorf("sync failed: status=%d, error=%d", status, errorCode)
		}
	}

	if f.callback != nil {
		f.callback.emitLog("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
	}

	// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π SYNC –∫–æ–º–∞–Ω–¥—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â—ë 7 –ø—É—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥ –∫–∞–∫ –≤ esptool.py
	if f.callback != nil {
		f.callback.emitLog("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏...")
	}

	for i := 0; i < 7; i++ {
		f.sendCommand(ESP_SYNC, []byte{}, 0)
		time.Sleep(10 * time.Millisecond)
		// –ß–∏—Ç–∞–µ–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
		f.readResponse(100 * time.Millisecond)
	}

	return nil
}

// spiAttach –ø–æ–¥–∫–ª—é—á–∞–µ—Ç SPI flash
func (f *ESP32Flasher) spiAttach() error {
	if f.callback != nil {
		f.callback.emitLog("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SPI Flash...")
	}

	// –î–ª—è ESP32 ROM loader –Ω—É–∂–Ω–æ 8 –±–∞–π—Ç: –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ = 0 (default SPI), –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ = 0
	data := make([]byte, 8)
	binary.LittleEndian.PutUint32(data[0:4], 0) // Default SPI interface
	binary.LittleEndian.PutUint32(data[4:8], 0) // Reserved, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0

	if f.callback != nil {
		f.callback.emitLog("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã SPI_ATTACH...")
	}

	if err := f.sendCommand(ESP_SPI_ATTACH, data, 0); err != nil {
		return fmt.Errorf("failed to send SPI attach command: %w", err)
	}

	if f.callback != nil {
		f.callback.emitLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ SPI_ATTACH...")
	}

	response, err := f.readResponse(3 * time.Second)
	if err != nil {
		return fmt.Errorf("timeout waiting for SPI attach response: %w", err)
	}

	if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_SPI_ATTACH {
		return fmt.Errorf("invalid SPI attach response (len=%d, dir=0x%02x, cmd=0x%02x)", len(response), response[0], response[1])
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (ESP32 ROM loader –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 4 –±–∞–π—Ç–∞)
	if len(response) >= 12 {
		status := response[len(response)-4]
		if status != 0x00 {
			errorCode := response[len(response)-3]
			return fmt.Errorf("SPI attach failed: status=%d, error=%d", status, errorCode)
		}
	}

	if f.callback != nil {
		f.callback.emitLog("‚úÖ SPI Flash –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}

	return nil
}

// calculateChecksum –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
func calculateChecksum(data []byte) uint32 {
	checksum := uint32(0xEF)
	for _, b := range data {
		checksum ^= uint32(b)
	}
	return checksum & 0xFF
}

// flashBegin –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–∏–≤–∫–∏
func (f *ESP32Flasher) flashBegin(size, offset uint32) error {
	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üìã –ù–∞—á–∞–ª–æ –ø—Ä–æ—à–∏–≤–∫–∏: —Ä–∞–∑–º–µ—Ä %d –±–∞–π—Ç, –∞–¥—Ä–µ—Å 0x%x", size, offset))
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è
	sectors := (size + ESP_FLASH_SECTOR - 1) / ESP_FLASH_SECTOR
	eraseSize := sectors * ESP_FLASH_SECTOR

	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–±–ª–æ–∫–∏ –ø–æ 4KB)
	blockSize := uint32(4096)
	numPackets := (size + blockSize - 1) / blockSize

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üßÆ –†–∞—Å—á–µ—Ç—ã: %d —Å–µ–∫—Ç–æ—Ä–æ–≤ (%d –±–∞–π—Ç) –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è, %d –ø–∞–∫–µ—Ç–æ–≤ –ø–æ %d –±–∞–π—Ç", sectors, eraseSize, numPackets, blockSize))
	}

	data := make([]byte, 16)
	binary.LittleEndian.PutUint32(data[0:4], eraseSize)  // Size to erase
	binary.LittleEndian.PutUint32(data[4:8], numPackets) // Number of data packets
	binary.LittleEndian.PutUint32(data[8:12], blockSize) // Packet size (4KB)
	binary.LittleEndian.PutUint32(data[12:16], offset)   // Flash offset

	if f.callback != nil {
		f.callback.emitLog("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã FLASH_BEGIN...")
	}

	if err := f.sendCommand(ESP_FLASH_BEGIN, data, 0); err != nil {
		return fmt.Errorf("failed to send flash begin command: %w", err)
	}

	if f.callback != nil {
		f.callback.emitLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ FLASH_BEGIN (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è)...")
	}

	response, err := f.readResponse(15 * time.Second) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å—Ç–∏—Ä–∞–Ω–∏—è
	if err != nil {
		return fmt.Errorf("flash begin timeout: %w", err)
	}

	if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_FLASH_BEGIN {
		return fmt.Errorf("flash begin failed: invalid response (len=%d, dir=0x%02x, cmd=0x%02x)", len(response), response[0], response[1])
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (ESP32 ROM loader –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 4 –±–∞–π—Ç–∞)
	if len(response) >= 12 {
		status := response[len(response)-4]
		if status != 0x00 {
			errorCode := response[len(response)-3]
			return fmt.Errorf("flash begin failed: status=%d, error=%d", status, errorCode)
		}
	}

	if f.callback != nil {
		f.callback.emitLog("‚úÖ Flash —Å—Ç–µ—Ä—Ç, –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö")
	}

	return nil
}

// flashData –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—à–∏–≤–∫–∏
func (f *ESP32Flasher) flashData(data []byte, seq uint32) error {
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞–Ω–Ω—ã—Ö
	header := make([]byte, 16)
	binary.LittleEndian.PutUint32(header[0:4], uint32(len(data))) // Data size
	binary.LittleEndian.PutUint32(header[4:8], seq)               // Sequence number
	binary.LittleEndian.PutUint32(header[8:12], 0)                // Reserved
	binary.LittleEndian.PutUint32(header[12:16], 0)               // Reserved

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞–Ω–Ω—ã–µ
	payload := append(header, data...)
	checksum := calculateChecksum(data)

	// –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
	for attempt := 0; attempt < 3; attempt++ {
		if err := f.sendCommand(ESP_FLASH_DATA, payload, checksum); err != nil {
			if attempt == 2 {
				return fmt.Errorf("failed to send flash data after 3 attempts: %w", err)
			}
			time.Sleep(100 * time.Millisecond)
			continue
		}

		response, err := f.readResponse(5 * time.Second)
		if err != nil {
			if attempt == 2 {
				return fmt.Errorf("timeout reading flash data response at seq %d: %w", seq, err)
			}
			time.Sleep(100 * time.Millisecond)
			continue
		}

		if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_FLASH_DATA {
			if attempt == 2 {
				return fmt.Errorf("invalid flash data response at sequence %d", seq)
			}
			time.Sleep(100 * time.Millisecond)
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (ESP32 ROM loader –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 4 –±–∞–π—Ç–∞)
		if len(response) >= 12 {
			status := response[len(response)-4]
			if status != 0x00 {
				errorCode := response[len(response)-3]
				return fmt.Errorf("flash data failed at seq %d: status=%d, error=%d", seq, status, errorCode)
			}
		}

		return nil // –£—Å–ø–µ—Ö
	}

	return fmt.Errorf("flash data failed at sequence %d after 3 attempts", seq)
}

// flashEnd –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–∏–≤–∫–∏
func (f *ESP32Flasher) flashEnd() error {
	data := make([]byte, 4)
	binary.LittleEndian.PutUint32(data, 0) // Reboot

	if err := f.sendCommand(ESP_FLASH_END, data, 0); err != nil {
		return err
	}

	response, err := f.readResponse(3 * time.Second)
	if err != nil {
		return err
	}

	if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_FLASH_END {
		return fmt.Errorf("flash end failed")
	}

	return nil
}

// FlashData –ø—Ä–æ—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ ESP32
func (f *ESP32Flasher) FlashData(data []byte, offset uint32, portName string) error {
	// 0. –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ ESP32
	f.wakeupESP32()

	// 0.5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏
	if err := f.testConnection(); err != nil {
		if f.callback != nil {
			f.callback.emitLog("‚ö†Ô∏è ESP32 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
		}
	}

	// 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
	if f.callback != nil {
		f.callback.emitLog("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å ESP32...")
		f.callback.emitProgress(30, "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
	}

	if err := f.sync(); err != nil {
		return fmt.Errorf("sync failed: %w", err)
	}

	// 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SPI
	if f.callback != nil {
		f.callback.emitLog("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SPI Flash...")
		f.callback.emitProgress(40, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SPI...")
	}
	if err := f.spiAttach(); err != nil {
		return fmt.Errorf("SPI attach failed: %w", err)
	}

	// 3. –ù–∞—á–∞–ª–æ –ø—Ä–æ—à–∏–≤–∫–∏
	if f.callback != nil {
		f.callback.emitLog("üóëÔ∏è –°—Ç–∏—Ä–∞–Ω–∏–µ —Å–µ–∫—Ç–æ—Ä–æ–≤ Flash...")
		f.callback.emitProgress(50, "–°—Ç–∏—Ä–∞–Ω–∏–µ Flash...")
	}
	if err := f.flashBegin(uint32(len(data)), offset); err != nil {
		return fmt.Errorf("flash begin failed: %w", err)
	}

	// 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞–º–∏
	blockSize := 4096
	seq := uint32(0)
	totalBlocks := (len(data) + blockSize - 1) / blockSize

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö (%d –±–ª–æ–∫–æ–≤ –ø–æ %d –±–∞–π—Ç)...", totalBlocks, blockSize))
		f.callback.emitProgress(60, "–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö...")
	}

	for i := 0; i < len(data); i += blockSize {
		end := i + blockSize
		if end > len(data) {
			end = len(data)
		}

		block := make([]byte, blockSize)
		copy(block, data[i:end])
		// –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ 0xFF
		for j := end - i; j < blockSize; j++ {
			block[j] = 0xFF
		}

		if err := f.flashData(block, seq); err != nil {
			return fmt.Errorf("flash data failed at block %d/%d: %w", seq+1, totalBlocks, err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		if f.callback != nil {
			progress := 60 + int(float64(seq+1)/float64(totalBlocks)*30) // 60-90%
			percent := float64(seq+1) / float64(totalBlocks) * 100
			f.callback.emitProgress(progress, fmt.Sprintf("–ó–∞–ø–∏—Å—å %.1f%% (%d/%d –±–ª–æ–∫–æ–≤)", percent, seq+1, totalBlocks))

			// –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
			if seq%5 == 0 || seq == uint32(totalBlocks-1) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 5-–π –±–ª–æ–∫ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
				f.callback.emitLog(fmt.Sprintf("üì¶ –ó–∞–ø–∏—Å–∞–Ω –±–ª–æ–∫ %d/%d (%.1f%%, %d –±–∞–π—Ç)", seq+1, totalBlocks, percent, end-i))
			}
		}

		seq++
	}

	// 5. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—à–∏–≤–∫–∏...")
		f.callback.emitProgress(95, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
	}
	if err := f.flashEnd(); err != nil {
		return fmt.Errorf("flash end failed: %w", err)
	}

	return nil
}

// wakeupESP32 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" ESP32
func (f *ESP32Flasher) wakeupESP32() {
	if f.callback != nil {
		f.callback.emitLog("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è ESP32...")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" ESP32
	wakeupData := []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	f.port.Write(wakeupData)
	time.Sleep(10 * time.Millisecond)

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(50 * time.Millisecond)
}

// testConnection –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ
func (f *ESP32Flasher) testConnection() error {
	if f.callback != nil {
		f.callback.emitLog("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å ESP32...")
	}

	// –ü–æ–ø—ã—Ç–∫–∞ 1: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ –Ω—É–ª–∏
	testData := []byte{0x00, 0x00, 0x00, 0x00}
	f.port.Write(testData)
	time.Sleep(100 * time.Millisecond)

	// –ß–∏—Ç–∞–µ–º —á—Ç–æ —É–≥–æ–¥–Ω–æ
	buffer := make([]byte, 256)
	n, err := f.port.Read(buffer)
	if err == nil && n > 0 {
		if f.callback != nil {
			f.callback.emitLog(fmt.Sprintf("üì° –ü–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç –æ—Ç ESP32", n))
		}
		return nil
	}

	// –ü–æ–ø—ã—Ç–∫–∞ 2: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º AT –∫–æ–º–∞–Ω–¥—É
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	atCmd := []byte("AT\r\n")
	f.port.Write(atCmd)
	time.Sleep(100 * time.Millisecond)

	n, err = f.port.Read(buffer)
	if err == nil && n > 0 {
		if f.callback != nil {
			f.callback.emitLog(fmt.Sprintf("üì° –ü–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç –æ—Ç ESP32 –Ω–∞ AT –∫–æ–º–∞–Ω–¥—É", n))
		}
		return nil
	}

	// –ü–æ–ø—ã—Ç–∫–∞ 3: –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SLIP END —Å–∏–º–≤–æ–ª—ã
	slipEnd := []byte{SLIP_END, SLIP_END, SLIP_END}
	f.port.Write(slipEnd)
	time.Sleep(100 * time.Millisecond)

	n, err = f.port.Read(buffer)
	if err == nil && n > 0 {
		if f.callback != nil {
			f.callback.emitLog(fmt.Sprintf("üì° –ü–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç –æ—Ç ESP32 –Ω–∞ SLIP", n))
		}
		return nil
	}

	return fmt.Errorf("ESP32 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∏ –Ω–∞ –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã")
}

// testBootloaderMode –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader
func (f *ESP32Flasher) testBootloaderMode() bool {
	if f.callback != nil {
		f.callback.emitLog("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ bootloader...")
	}

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(100 * time.Millisecond)

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ bootloader'–∞
	if f.callback != nil {
		f.callback.emitLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ bootloader...")
	}

	isInBootloader := false
	buffer := make([]byte, 4096)

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –ø–æ–∫–∞ ESP32 –≤—ã–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
	for attempt := 0; attempt < 10; attempt++ {
		f.port.SetReadTimeout(500 * time.Millisecond)
		n, err := f.port.Read(buffer)

		if err != nil || n == 0 {
			// –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É–∂–µ 500–º—Å, bootloader –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–≤–æ–¥
			if f.callback != nil {
				f.callback.emitLog("üîç Bootloader –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –∫–∞–Ω–∞–ª —á–∏—Å—Ç")
			}
			break
		}

		data := string(buffer[:n])
		if f.callback != nil {
			f.callback.emitLog(fmt.Sprintf("üîç Bootloader output (#%d): %s", attempt+1, strings.TrimSpace(data)))
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º —Ä–µ–∂–∏–º–µ ESP32
		if strings.Contains(data, "waiting for download") ||
			strings.Contains(data, "download mode") {
			isInBootloader = true
			if f.callback != nil {
				f.callback.emitLog("‚úÖ ESP32 —è–≤–Ω–æ —Å–æ–æ–±—â–∞–µ—Ç –æ —Ä–µ–∂–∏–º–µ download")
			}
		}

		// –ü—Ä–∏–∑–Ω–∞–∫–∏ bootloader —Ä–µ–∂–∏–º–∞ (—Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏)
		if strings.Contains(data, "rst:0x10") ||
			strings.Contains(data, "boot:0x13") ||
			strings.Contains(data, "csum err") ||
			strings.Contains(data, "ets_main.c") {
			isInBootloader = true
			if f.callback != nil {
				f.callback.emitLog("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ bootloader —Ä–µ–∂–∏–º–∞")
			}
		}

		// –ü—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–ª–æ—Ö–æ!)
		if strings.Contains(data, "WiFi") ||
			strings.Contains(data, "IP") ||
			strings.Contains(data, "ESP-NOW") ||
			strings.Contains(data, "HTTP") ||
			strings.Contains(data, "TCP") ||
			strings.Contains(data, "app_main") {
			if f.callback != nil {
				f.callback.emitLog("‚ùå ESP32 –∑–∞–≥—Ä—É–∑–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –ù–ï –≤ bootloader —Ä–µ–∂–∏–º–µ")
			}
			return false
		}
	}

	// –¢–µ–ø–µ—Ä—å –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å—Ç, –ø—Ä–æ–±—É–µ–º SYNC –∫–æ–º–∞–Ω–¥—É
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ö–∞–Ω–∞–ª —á–∏—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SYNC –∫–æ–º–∞–Ω–¥—É...")
	}

	// –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ SYNC
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(100 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SYNC –∫–æ–º–∞–Ω–¥—É
	syncData := make([]byte, 36)
	copy(syncData[:4], []byte{0x07, 0x07, 0x12, 0x20})
	for i := 4; i < 36; i++ {
		syncData[i] = 0x55
	}

	if err := f.sendCommand(ESP_SYNC, syncData, 0); err != nil {
		if f.callback != nil {
			f.callback.emitLog("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SYNC –∫–æ–º–∞–Ω–¥—ã")
		}
		return isInBootloader // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
	}

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
	response, err := f.readResponse(2 * time.Second)
	if err != nil {
		if f.callback != nil {
			f.callback.emitLog("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ SYNC –∫–æ–º–∞–Ω–¥—É")
		}
		return isInBootloader // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
	if len(response) >= 8 &&
		response[0] == 0x01 &&
		response[1] == ESP_SYNC {
		if f.callback != nil {
			f.callback.emitLog("‚úÖ SYNC –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω - ESP32 —Ç–æ—á–Ω–æ –≤ —Ä–µ–∂–∏–º–µ bootloader")
		}
		return true
	}

	if f.callback != nil {
		f.callback.emitLog("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ SYNC –∫–æ–º–∞–Ω–¥—É")
		if isInBootloader {
			f.callback.emitLog("‚úÖ –ù–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞ bootloader —Ä–µ–∂–∏–º - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
		}
	}

	return isInBootloader
}

// espressifReferenceReset –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –∏–∑ esp-serial-flasher
// –†–µ–∞–ª–∏–∑—É–µ—Ç usb_serial_converter_enter_bootloader() –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Espressif
func (f *ESP32Flasher) espressifReferenceReset() {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ (esp-serial-flasher)...")
	}

	// –¢–û–ß–ù–ê–Ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ usb_serial_converter_enter_bootloader():
	// 1. cdc_acm_host_set_control_line_state(device, true, false);  (DTR=1,RTS=0 -> GPIO0=LOW,EN=HIGH)
	// 2. usb_serial_converter_reset_target():
	//    - cdc_acm_host_set_control_line_state(device, true, true);   (DTR=1,RTS=1 -> GPIO0=LOW,EN=LOW)
	//    - loader_port_delay_ms(SERIAL_FLASHER_RESET_HOLD_TIME_MS);   (100ms)
	//    - cdc_acm_host_set_control_line_state(device, true, false);  (DTR=1,RTS=0 -> GPIO0=LOW,EN=HIGH)
	// 3. loader_port_delay_ms(SERIAL_FLASHER_BOOT_HOLD_TIME_MS);      (50ms)
	// 4. cdc_acm_host_set_control_line_state(device, false, false);   (DTR=0,RTS=0 -> GPIO0=HIGH,EN=HIGH)

	// –í esp-serial-flasher DTR/RTS –Ω–∞–ø—Ä—è–º—É—é —É–ø—Ä–∞–≤–ª—è—é—Ç GPIO0/EN (–±–µ–∑ –∏–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
	// DTR=true -> GPIO0=LOW, DTR=false -> GPIO0=HIGH
	// RTS=true -> EN=LOW,   RTS=false -> EN=HIGH

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç xStreamBufferReset)
	if f.callback != nil {
		f.callback.emitLog("  üìã –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤...")
	}
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 1: set_control_line_state(true, false) -> GPIO0=LOW, EN=HIGH")
	}
	f.port.SetDTR(true)               // GPIO0 = LOW (boot mode)
	f.port.SetRTS(false)              // EN = HIGH (–Ω–µ –≤ —Å–±—Ä–æ—Å–µ)
	time.Sleep(10 * time.Millisecond) // –ú–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 2a: set_control_line_state(true, true) -> GPIO0=LOW, EN=LOW (reset)")
	}
	f.port.SetDTR(true) // GPIO0 = LOW (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ boot mode)
	f.port.SetRTS(true) // EN = LOW (assert reset)

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("  üìã –®–∞–≥ 2b: –û–∂–∏–¥–∞–Ω–∏–µ %d–º—Å (reset hold)", SERIAL_FLASHER_RESET_HOLD_TIME_MS))
	}
	time.Sleep(SERIAL_FLASHER_RESET_HOLD_TIME_MS * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 2c: set_control_line_state(true, false) -> GPIO0=LOW, EN=HIGH (deassert reset)")
	}
	f.port.SetDTR(true)  // GPIO0 = LOW (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ boot mode)
	f.port.SetRTS(false) // EN = HIGH (deassert reset)

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("  üìã –®–∞–≥ 3: –£–¥–µ—Ä–∂–∏–≤–∞–µ–º boot %d–º—Å", SERIAL_FLASHER_BOOT_HOLD_TIME_MS))
	}
	time.Sleep(SERIAL_FLASHER_BOOT_HOLD_TIME_MS * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 4: set_control_line_state(false, false) -> GPIO0=HIGH, EN=HIGH (release boot)")
	}
	f.port.SetDTR(false) // GPIO0 = HIGH (exit boot mode)
	f.port.SetRTS(false) // EN = HIGH (–æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ –≤ —Å–±—Ä–æ—Å–µ)

	// –ï—â—ë —Ä–∞–∑ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ ESP32 –ø–æ—Å–ª–µ reset sequence
	time.Sleep(200 * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog("  ‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	}
}

// espressifReferenceResetInverted –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—É –∂–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–æ —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π DTR/RTS
// –ù–µ–∫–æ—Ç–æ—Ä—ã–µ USB-UART –∞–¥–∞–ø—Ç–µ—Ä—ã (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–µ—à–µ–≤—ã–µ) –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç —Å–∏–≥–Ω–∞–ª—ã
func (f *ESP32Flasher) espressifReferenceResetInverted() {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –≠—Ç–∞–ª–æ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–û–ô –ª–æ–≥–∏–∫–æ–π DTR/RTS...")
	}

	// –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: DTR=false -> GPIO0=LOW, RTS=false -> EN=LOW

	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
	if f.callback != nil {
		f.callback.emitLog("  üìã –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤...")
	}
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 1: set_control_line_state(false, true) -> GPIO0=LOW, EN=HIGH (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
	}
	f.port.SetDTR(false)              // GPIO0 = LOW (boot mode) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	f.port.SetRTS(true)               // EN = HIGH (–Ω–µ –≤ —Å–±—Ä–æ—Å–µ) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	time.Sleep(10 * time.Millisecond) // –ú–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 2a: set_control_line_state(false, false) -> GPIO0=LOW, EN=LOW (reset) (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
	}
	f.port.SetDTR(false) // GPIO0 = LOW (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ boot mode) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	f.port.SetRTS(false) // EN = LOW (assert reset) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("  üìã –®–∞–≥ 2b: –û–∂–∏–¥–∞–Ω–∏–µ %d–º—Å (reset hold)", SERIAL_FLASHER_RESET_HOLD_TIME_MS))
	}
	time.Sleep(SERIAL_FLASHER_RESET_HOLD_TIME_MS * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 2c: set_control_line_state(false, true) -> GPIO0=LOW, EN=HIGH (deassert reset) (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
	}
	f.port.SetDTR(false) // GPIO0 = LOW (–æ—Å—Ç–∞–µ—Ç—Å—è –≤ boot mode) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	f.port.SetRTS(true)  // EN = HIGH (deassert reset) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("  üìã –®–∞–≥ 3: –£–¥–µ—Ä–∂–∏–≤–∞–µ–º boot %d–º—Å", SERIAL_FLASHER_BOOT_HOLD_TIME_MS))
	}
	time.Sleep(SERIAL_FLASHER_BOOT_HOLD_TIME_MS * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog("  üìã –®–∞–≥ 4: set_control_line_state(true, true) -> GPIO0=HIGH, EN=HIGH (release boot) (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)")
	}
	f.port.SetDTR(true) // GPIO0 = HIGH (exit boot mode) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
	f.port.SetRTS(true) // EN = HIGH (–æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ –≤ —Å–±—Ä–æ—Å–µ) - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞

	// –ï—â—ë —Ä–∞–∑ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ ESP32 –ø–æ—Å–ª–µ reset sequence
	time.Sleep(200 * time.Millisecond)

	if f.callback != nil {
		f.callback.emitLog("  ‚úÖ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	}
}

// usbSerialConverterEnterBootloader –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å USB-UART –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
// –†–µ–∞–ª–∏–∑—É–µ—Ç usb_serial_converter_enter_bootloader() –∏–∑ esp-serial-flasher
func (f *ESP32Flasher) usbSerialConverterEnterBootloader() error {
	f.espressifReferenceReset()
	return nil
}

// usbSerialConverterEnterBootloaderInverted –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
// –î–ª—è USB-UART –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ —Å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ DTR/RTS
func (f *ESP32Flasher) usbSerialConverterEnterBootloaderInverted() error {
	f.espressifReferenceResetInverted()
	return nil
}
