package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"strings"
	"time"
)

// slipEncode –∫–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ SLIP –ø—Ä–æ—Ç–æ–∫–æ–ª
func slipEncode(data []byte) []byte {
	var buf bytes.Buffer
	buf.WriteByte(SLIP_END)

	for _, b := range data {
		switch b {
		case SLIP_END:
			buf.WriteByte(SLIP_ESC)
			buf.WriteByte(SLIP_ESC_END)
		case SLIP_ESC:
			buf.WriteByte(SLIP_ESC)
			buf.WriteByte(SLIP_ESC_ESC)
		default:
			buf.WriteByte(b)
		}
	}

	buf.WriteByte(SLIP_END)
	return buf.Bytes()
}

// slipDecode –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç SLIP –ø–∞–∫–µ—Ç
func slipDecode(data []byte) ([]byte, error) {
	if len(data) < 2 {
		return nil, fmt.Errorf("packet too short: %d bytes", len(data))
	}

	// –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü SLIP –ø–∞–∫–µ—Ç–∞
	start := -1
	end := -1

	for i := 0; i < len(data); i++ {
		if data[i] == SLIP_END {
			if start == -1 {
				start = i
			} else {
				end = i
				break
			}
		}
	}

	if start == -1 || end == -1 {
		return nil, fmt.Errorf("no valid SLIP packet found")
	}

	var buf bytes.Buffer
	escaped := false

	for i := start + 1; i < end; i++ {
		b := data[i]
		if escaped {
			switch b {
			case SLIP_ESC_END:
				buf.WriteByte(SLIP_END)
			case SLIP_ESC_ESC:
				buf.WriteByte(SLIP_ESC)
			default:
				return nil, fmt.Errorf("invalid escape sequence: 0x%02x", b)
			}
			escaped = false
		} else if b == SLIP_ESC {
			escaped = true
		} else {
			buf.WriteByte(b)
		}
	}

	if escaped {
		return nil, fmt.Errorf("packet ends with escape character")
	}

	return buf.Bytes(), nil
}

// sendCommand –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ ESP32
func (f *ESP32Flasher) sendCommand(cmd byte, data []byte, checksum uint32) error {
	packet := make([]byte, 8+len(data))
	packet[0] = 0x00                                              // Direction (request)
	packet[1] = cmd                                               // Command
	binary.LittleEndian.PutUint16(packet[2:4], uint16(len(data))) // Size
	binary.LittleEndian.PutUint32(packet[4:8], checksum)          // Checksum
	copy(packet[8:], data)                                        // Data

	encoded := slipEncode(packet)

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã 0x%02x (%d –±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö)", cmd, len(data)))
	}

	_, err := f.port.Write(encoded)
	return err
}

// readResponse —á–∏—Ç–∞–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç ESP32
func (f *ESP32Flasher) readResponse(timeout time.Duration) ([]byte, error) {
	f.port.SetReadTimeout(timeout)

	var allData bytes.Buffer
	buffer := make([]byte, 1024)
	start := time.Now()

	for time.Since(start) < timeout {
		n, err := f.port.Read(buffer)
		if err != nil && n == 0 {
			if allData.Len() > 0 {
				break
			}
			time.Sleep(1 * time.Millisecond)
			continue
		}

		if n > 0 {
			allData.Write(buffer[:n])

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–Ω–æ–≥–æ SLIP –ø–∞–∫–µ—Ç–∞
			data := allData.Bytes()
			if len(data) >= 2 {
				slipStart := -1
				slipEnd := -1
				for i := 0; i < len(data); i++ {
					if data[i] == SLIP_END {
						if slipStart == -1 {
							slipStart = i
						} else {
							slipEnd = i
							break
						}
					}
				}

				if slipStart != -1 && slipEnd != -1 {
					break
				}
			}
		}
	}

	if allData.Len() == 0 {
		return nil, fmt.Errorf("timeout reading response after %v", timeout)
	}

	decoded, err := slipDecode(allData.Bytes())
	if err != nil {
		return nil, fmt.Errorf("failed to decode SLIP packet: %w", err)
	}

	return decoded, nil
}

// sync –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å ESP32 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–∏–∫–ª–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
func (f *ESP32Flasher) sync() error {
	if f.callback != nil {
		f.callback.emitLog("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å ESP32 (–æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫)...")
	}

	// ESP32 –≤ —Ü–∏–∫–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫ - –Ω—É–∂–Ω–æ –ª–æ–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç –º–µ–∂–¥—É reset'–∞–º–∏
	syncData := make([]byte, 36)
	syncData[0] = 0x07
	syncData[1] = 0x07
	syncData[2] = 0x12
	syncData[3] = 0x20
	for i := 4; i < 36; i++ {
		syncData[i] = 0x55
	}

	// –ü—Ä–æ–±—É–µ–º SYNC –∫–æ–º–∞–Ω–¥—É –º–Ω–æ–≥–æ —Ä–∞–∑ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
	for attempt := 0; attempt < 15; attempt++ { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
		if f.callback != nil && attempt > 0 {
			f.callback.emitLog(fmt.Sprintf("üîÑ SYNC –ø–æ–ø—ã—Ç–∫–∞ %d/15 (–ª–æ–≤–∏–º –º–æ–º–µ–Ω—Ç –º–µ–∂–¥—É reset'–∞–º–∏)...", attempt+1))
		}

		// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
		f.port.ResetInputBuffer()
		f.port.ResetOutputBuffer()
		time.Sleep(200 * time.Millisecond) // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –±—ã—Å—Ç—Ä–æ
		if err := f.sendCommand(ESP_SYNC, syncData, 0); err != nil {
			if f.callback != nil {
				f.callback.emitLog(fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SYNC: %v", err))
			}
			continue
		}

		// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
		response, err := f.readResponseRobust(1 * time.Second) // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
		if err != nil {
			if f.callback != nil && attempt%3 == 0 { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é 3-—é –æ—à–∏–±–∫—É
				f.callback.emitLog(fmt.Sprintf("‚ö†Ô∏è SYNC –ø–æ–ø—ã—Ç–∫–∞ %d: %v", attempt+1, err))
			}
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
		if len(response) >= 8 && response[0] == 0x01 && response[1] == ESP_SYNC {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ SYNC —É—Å–ø–µ—à–µ–Ω! Bootloader —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
			for i := 0; i < 7; i++ {
				f.sendCommand(ESP_SYNC, []byte{}, 0)
				time.Sleep(10 * time.Millisecond)
				f.readResponseRobust(100 * time.Millisecond) // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
			}

			return nil
		}

		if f.callback != nil && len(response) > 0 {
			f.callback.emitLog(fmt.Sprintf("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π SYNC –æ—Ç–≤–µ—Ç (len=%d): %x", len(response), response[:min(8, len(response))]))
		}

		// –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
		time.Sleep(150 * time.Millisecond)
	}

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å - –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
	if f.callback != nil {
		f.callback.emitLog("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ bootloader...")
	}

	return f.forceBootloaderStabilization()
}

// forceBootloaderStabilization –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç bootloader
func (f *ESP32Flasher) forceBootloaderStabilization() error {
	if f.callback != nil {
		f.callback.emitLog("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–±—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥...")
	}

	// –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã—Ö —Å–±—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
	for i := 0; i < 3; i++ {
		f.port.SetDTR(true) // GPIO0 = LOW (boot mode)
		f.port.SetRTS(true) // EN = LOW (reset)
		time.Sleep(50 * time.Millisecond)

		f.port.SetRTS(false) // EN = HIGH (release reset)
		time.Sleep(100 * time.Millisecond)

		// –û—á–∏—â–∞–µ–º –º—É—Å–æ—Ä
		f.port.ResetInputBuffer()
		f.port.ResetOutputBuffer()
		time.Sleep(200 * time.Millisecond)
	}

	f.port.SetDTR(false)               // GPIO0 = HIGH (release boot mode)
	time.Sleep(500 * time.Millisecond) // –î–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏

	// –ü—Ä–æ–±—É–µ–º SYNC –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
	syncData := make([]byte, 36)
	syncData[0] = 0x07
	syncData[1] = 0x07
	syncData[2] = 0x12
	syncData[3] = 0x20
	for i := 4; i < 36; i++ {
		syncData[i] = 0x55
	}

	for attempt := 0; attempt < 5; attempt++ {
		f.port.ResetInputBuffer()
		f.port.ResetOutputBuffer()
		time.Sleep(300 * time.Millisecond)

		if err := f.sendCommand(ESP_SYNC, syncData, 0); err != nil {
			continue
		}

		response, err := f.readResponseRobust(2 * time.Second)
		if err != nil {
			continue
		}

		if len(response) >= 8 && response[0] == 0x01 && response[1] == ESP_SYNC {
			if f.callback != nil {
				f.callback.emitLog("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
			}
			return nil
		}
	}

	return fmt.Errorf("failed to stabilize bootloader after all attempts")
}

// min helper function
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// readResponseRobust —É–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º—É—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (f *ESP32Flasher) readResponseRobust(timeout time.Duration) ([]byte, error) {
	f.port.SetReadTimeout(timeout)

	var allData bytes.Buffer
	buffer := make([]byte, 1024)
	start := time.Now()

	// –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞
	for time.Since(start) < timeout {
		n, err := f.port.Read(buffer)
		if err != nil && n == 0 {
			if allData.Len() > 0 {
				break
			}
			time.Sleep(10 * time.Millisecond)
			continue
		}

		if n > 0 {
			allData.Write(buffer[:n])
			time.Sleep(10 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		}
	}

	if allData.Len() == 0 {
		return nil, fmt.Errorf("timeout reading response after %v", timeout)
	}

	rawData := allData.Bytes()

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("üîç –ü–æ–ª—É—á–µ–Ω–æ %d –±–∞–π—Ç: %x", len(rawData), rawData))
	}

	// –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ SLIP –ø–∞–∫–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
	for startIdx := 0; startIdx < len(rawData); startIdx++ {
		if rawData[startIdx] != SLIP_END {
			continue
		}

		// –ù–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ, –∏—â–µ–º –∫–æ–Ω–µ—Ü
		for endIdx := startIdx + 1; endIdx < len(rawData); endIdx++ {
			if rawData[endIdx] != SLIP_END {
				continue
			}

			// –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–µ–≥–º–µ–Ω—Ç
			segment := rawData[startIdx : endIdx+1]
			decoded, err := slipDecode(segment)
			if err != nil {
				continue // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
			}

			if f.callback != nil {
				f.callback.emitLog(fmt.Sprintf("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω SLIP –ø–∞–∫–µ—Ç (%d –±–∞–π—Ç): %x", len(decoded), decoded))
			}

			return decoded, nil
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π SLIP –ø–∞–∫–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
	if len(rawData) >= 8 {
		// –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ SLIP –æ–±–µ—Ä—Ç–∫–∏
		for i := 0; i <= len(rawData)-8; i++ {
			if rawData[i] == 0x01 && rawData[i+1] == ESP_SYNC {
				response := rawData[i:]
				if len(response) >= 8 {
					if f.callback != nil {
						f.callback.emitLog(fmt.Sprintf("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –±–µ–∑ SLIP: %x", response[:8]))
					}
					return response, nil
				}
			}
		}
	}

	return nil, fmt.Errorf("no valid SLIP packet or response found in %d bytes", len(rawData))
}

// testSync –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤—è–∑—å —á–µ—Ä–µ–∑ SYNC –∫–æ–º–∞–Ω–¥—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) testSync() bool {
	// –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –∏ –∂–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(300 * time.Millisecond)

	syncData := make([]byte, 36)
	syncData[0] = 0x07
	syncData[1] = 0x07
	syncData[2] = 0x12
	syncData[3] = 0x20
	for i := 4; i < 36; i++ {
		syncData[i] = 0x55
	}

	if err := f.sendCommand(ESP_SYNC, syncData, 0); err != nil {
		return false
	}

	response, err := f.readResponseRobust(2 * time.Second)
	if err != nil {
		return false
	}

	return len(response) >= 8 && response[0] == 0x01 && response[1] == ESP_SYNC
}

// detectChip –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø ESP32 —á–∏–ø–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) detectChip() error {
	if f.callback != nil {
		f.callback.emitLog("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —á–∏–ø–∞...")
	}

	data := make([]byte, 4)
	binary.LittleEndian.PutUint32(data, CHIP_DETECT_MAGIC_REG_ADDR)

	if err := f.sendCommand(ESP_READ_REG, data, 0); err != nil {
		return fmt.Errorf("failed to read chip detect register: %w", err)
	}

	response, err := f.readResponseRobust(2 * time.Second)
	if err != nil {
		return fmt.Errorf("failed to read chip detect response: %w", err)
	}

	if len(response) < 12 {
		return fmt.Errorf("invalid chip detect response length: %d", len(response))
	}

	regValue := binary.LittleEndian.Uint32(response[8:12])

	switch regValue {
	case ESP32_CHIP_MAGIC:
		f.chipType = CHIP_ESP32
	case ESP32S2_CHIP_MAGIC:
		f.chipType = CHIP_ESP32S2
	case ESP32S3_CHIP_MAGIC:
		f.chipType = CHIP_ESP32S3
	case ESP32C3_CHIP_MAGIC:
		f.chipType = CHIP_ESP32C3
	default:
		f.chipType = CHIP_ESP32 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ESP32
	}

	if f.callback != nil {
		f.callback.emitLog(fmt.Sprintf("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–∏–ø: %s (0x%08x)", f.chipType.String(), regValue))
	}

	return nil
}

// spiAttach –ø–æ–¥–∫–ª—é—á–∞–µ—Ç SPI flash —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
func (f *ESP32Flasher) spiAttach() error {
	if f.callback != nil {
		f.callback.emitLog("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SPI Flash...")
	}

	data := make([]byte, 8)
	binary.LittleEndian.PutUint32(data[0:4], 0)
	binary.LittleEndian.PutUint32(data[4:8], 0)

	if err := f.sendCommand(ESP_SPI_ATTACH, data, 0); err != nil {
		return fmt.Errorf("failed to send SPI attach: %w", err)
	}

	response, err := f.readResponseRobust(5 * time.Second)
	if err != nil {
		return fmt.Errorf("SPI attach timeout: %w", err)
	}

	if len(response) < 8 || response[0] != 0x01 || response[1] != ESP_SPI_ATTACH {
		return fmt.Errorf("invalid SPI attach response")
	}

	if f.callback != nil {
		f.callback.emitLog("‚úÖ SPI Flash –ø–æ–¥–∫–ª—é—á–µ–Ω")
	}

	return nil
}

// calculateChecksum –≤—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É –¥–∞–Ω–Ω—ã—Ö
func calculateChecksum(data []byte) uint32 {
	checksum := uint32(0xEF)
	for _, b := range data {
		checksum ^= uint32(b)
	}
	return checksum & 0xFF
}

// isInBootloader –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ ESP32 –≤ —Ä–µ–∂–∏–º–µ bootloader
func (f *ESP32Flasher) isInBootloader() bool {
	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(300 * time.Millisecond)

	buffer := make([]byte, 2048)
	bootloaderOutput := ""

	for i := 0; i < 8; i++ {
		f.port.SetReadTimeout(300 * time.Millisecond)
		n, _ := f.port.Read(buffer)
		if n > 0 {
			bootloaderOutput += string(buffer[:n])
		}
		time.Sleep(50 * time.Millisecond)
	}

	if f.callback != nil && bootloaderOutput != "" {
		f.callback.emitLog(fmt.Sprintf("üîç Bootloader output: %s", strings.TrimSpace(bootloaderOutput)))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ bootloader —Ä–µ–∂–∏–º–∞
	isBootloader := strings.Contains(bootloaderOutput, "waiting for download") ||
		strings.Contains(bootloaderOutput, "download mode") ||
		strings.Contains(bootloaderOutput, "Brownout") ||
		strings.Contains(bootloaderOutput, "rst:0x10") ||
		strings.Contains(bootloaderOutput, "boot:0x13") ||
		strings.Contains(bootloaderOutput, "ets_main.c")

	// –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–ª–æ—Ö–æ!)
	if strings.Contains(bootloaderOutput, "ESP32 RC Transmitter") ||
		strings.Contains(bootloaderOutput, "WiFi") ||
		strings.Contains(bootloaderOutput, "app_main") ||
		strings.Contains(bootloaderOutput, "–í–µ—Ä—Å–∏—è –ø—Ä–æ—à") {
		if f.callback != nil {
			f.callback.emitLog("‚ùå ESP32 –∑–∞–≥—Ä—É–∑–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –ù–ï –≤ bootloader —Ä–µ–∂–∏–º–µ")
		}
		return false
	}

	f.port.ResetInputBuffer()
	f.port.ResetOutputBuffer()
	time.Sleep(200 * time.Millisecond)

	return isBootloader || f.testSync()
}
